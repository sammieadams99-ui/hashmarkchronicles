/**
 * Player spotlight sidebar
 * ------------------------
 * Renders top three players for offense/defense across last game and season.
 * Data is sourced from JSON files generated by the build pipeline.
 */

(function () {
  const mount = document.getElementById("player-spotlight");
  if (!mount) return;

  mount.classList.add("hc-spotlight-root");
  mount.textContent = "Loading spotlight grades…";

  const files = {
    offense_last: "/data/spotlight_offense_last.json",
    offense_season: "/data/spotlight_offense_season.json",
    defense_last: "/data/spotlight_defense_last.json",
    defense_season: "/data/spotlight_defense_season.json",
  };

  const state = {
    datasets: {},
  };

  const layout = [
    {
      label: "Offense",
      subtitle: "Grades derived from the spotlight model",
      tiles: [
        {
          key: "offense_last",
          title: "Last Game",
          empty: "Waiting on the latest offensive grades from the last game.",
        },
        {
          key: "offense_season",
          title: "Season",
          empty: "Season-long offensive grades will appear once data arrives.",
        },
      ],
    },
    {
      label: "Defense",
      subtitle: "Grades derived from the spotlight model",
      tiles: [
        {
          key: "defense_last",
          title: "Last Game",
          empty: "Waiting on the latest defensive grades from the last game.",
        },
        {
          key: "defense_season",
          title: "Season",
          empty: "Season-long defensive grades will appear once data arrives.",
        },
      ],
    },
  ];

  function h(tag, attrs, ...kids) {
    const el = document.createElement(tag);
    for (const [key, value] of Object.entries(attrs || {})) {
      if (key === "class") {
        el.className = value;
      } else if (key === "html") {
        el.innerHTML = value;
      } else {
        el.setAttribute(key, value);
      }
    }
    for (const kid of kids) {
      if (kid == null) continue;
      el.appendChild(typeof kid === "string" ? document.createTextNode(kid) : kid);
    }
    return el;
  }

  function normalizeGrade(entry) {
    const letter =
      entry?.letter ??
      entry?.grade_letter ??
      entry?.gradeLetter ??
      entry?.grade ??
      "C";
    const pctRaw =
      entry?.pct ??
      entry?.grade_pct ??
      entry?.gradePct ??
      entry?.percent ??
      entry?._score ??
      50;

    const pct = Number.isFinite(pctRaw)
      ? pctRaw
      : Number.parseFloat(typeof pctRaw === "string" ? pctRaw.replace(/[^0-9.]/g, "") : pctRaw) || 50;

    return { letter, pct: Math.round(pct) };
  }

  function gradeBadge(letter, pct) {
    const badge = h("span", { class: "hc-grade" }, `${letter} `, h("small", {}, `${pct}%`));
    badge.style.display = "inline-flex";
    badge.style.alignItems = "center";
    badge.style.gap = "6px";
    badge.style.fontWeight = "700";
    badge.style.background = "#0b3a82";
    badge.style.color = "white";
    badge.style.padding = "2px 8px";
    badge.style.borderRadius = "12px";
    badge.style.fontSize = "0.8rem";
    return badge;
  }

  function card(entry = {}) {
    const initials = (entry.name || "")
      .split(/\s+/)
      .filter(Boolean)
      .map((w) => w[0])
      .join("")
      .slice(0, 2)
      .toUpperCase() || "UK";

    const tag = entry.espn ? "a" : "div";
    const attrs = { class: "hc-card" };
    if (entry.espn) {
      attrs.href = entry.espn;
      attrs.target = "_blank";
      attrs.rel = "noopener";
    }

    const img = entry.headshot
      ? h("img", {
          src: entry.headshot,
          alt: entry.name || "Player headshot",
          referrerpolicy: "no-referrer",
          loading: "lazy",
        })
      : h("div", { class: "hc-avatar" }, initials);

    const posText = entry.pos || entry.position || "";
    const name = h(
      "div",
      { class: "hc-name" },
      entry.name || "Unnamed",
      posText ? " " : "",
      posText ? h("span", { class: "hc-pos" }, `• ${posText}`) : null
    );

    const stats = h(
      "div",
      { class: "hc-stat" },
      entry.statline || entry.summary || (entry.espn ? "View on ESPN" : "—")
    );

    const gradeInfo = normalizeGrade(entry);
    const grade = gradeBadge(gradeInfo.letter, gradeInfo.pct);

    const row = h("div", { class: "hc-row" }, img, h("div", { class: "hc-meta" }, name, stats));
    const wrap = h(tag, attrs, row, h("div", { class: "hc-grade-wrap" }, grade));

    wrap.style.display = "grid";
    wrap.style.gridTemplateColumns = "1fr auto";
    wrap.style.gap = "6px";
    wrap.style.alignItems = "center";
    wrap.style.padding = "10px";
    wrap.style.border = "1px solid #e5e8ef";
    wrap.style.borderRadius = "12px";
    wrap.style.background = "white";
    wrap.style.width = "100%";
    wrap.style.boxShadow = "0 6px 14px rgba(15, 23, 42, 0.06)";

    if (tag === "a") {
      wrap.style.textDecoration = "none";
      wrap.style.color = "inherit";
    }

    if (img.style) {
      img.style.width = "44px";
      img.style.height = "44px";
      img.style.borderRadius = "50%";
      img.style.objectFit = "cover";
      img.style.background = "#d4dcf3";
      img.style.display = "block";
    }

    const meta = wrap.querySelector(".hc-meta");
    if (meta) {
      meta.style.display = "grid";
      meta.style.gap = "2px";
    }

    const pos = wrap.querySelector(".hc-pos");
    if (pos) {
      pos.style.color = "#6b7280";
      pos.style.fontWeight = "600";
      pos.style.marginLeft = "6px";
    }

    const stat = wrap.querySelector(".hc-stat");
    if (stat) {
      stat.style.color = "#1f2937";
      stat.style.fontSize = "0.92rem";
    }

    const gradeWrap = wrap.querySelector(".hc-grade-wrap");
    if (gradeWrap) {
      gradeWrap.style.display = "flex";
      gradeWrap.style.justifyContent = "flex-end";
      gradeWrap.style.alignItems = "center";
    }

    return wrap;
  }

  function rankBadge(num) {
    const badge = h("span", { class: "hc-spotlight-rank" }, num.toString());
    return badge;
  }

  function emptyState(msg) {
    return h("div", { class: "hc-spotlight-empty" }, msg);
  }

  function buildTile(config, entries) {
    const tile = h("article", { class: "hc-spotlight-tile" });
    tile.appendChild(h("h4", { class: "hc-spotlight-tile__title" }, config.title));

    const list = h("ol", { class: "hc-spotlight-list" });

    if (Array.isArray(entries) && entries.length) {
      entries.slice(0, 3).forEach((entry, idx) => {
        const item = h("li", { class: "hc-spotlight-list-item" });
        item.appendChild(rankBadge(idx + 1));
        item.appendChild(card(entry));
        list.appendChild(item);
      });
    } else {
      list.appendChild(
        h(
          "li",
          { class: "hc-spotlight-list-item hc-spotlight-list-item--empty" },
          emptyState(config.empty)
        )
      );
    }

    tile.appendChild(list);
    return tile;
  }

  function buildGroup(groupConfig, dataMap) {
    const group = h("section", { class: "hc-spotlight-group" });
    group.appendChild(
      h(
        "header",
        { class: "hc-spotlight-group__header" },
        h("h3", { class: "hc-spotlight-group__title" }, groupConfig.label),
        h("p", { class: "hc-spotlight-group__subtitle" }, groupConfig.subtitle)
      )
    );

    const tilesWrap = h("div", { class: "hc-spotlight-tiles" });
    for (const tileConfig of groupConfig.tiles) {
      tilesWrap.appendChild(buildTile(tileConfig, dataMap[tileConfig.key] || []));
    }

    group.appendChild(tilesWrap);
    return group;
  }

  async function loadOnce(key) {
    if (state.datasets[key]) return state.datasets[key];

    try {
      const res = await fetch(files[key], { cache: "no-cache" });
      if (!res.ok) throw new Error(`${files[key]} -> ${res.status}`);
      const json = await res.json();
      state.datasets[key] = json;
      return json;
    } catch (err) {
      console.warn("spotlight load failed", err.message);
      state.datasets[key] = [];
      return [];
    }
  }

  async function bootstrap() {
    const keys = Object.keys(files);
    const entries = await Promise.all(
      keys.map(async (key) => {
        const data = await loadOnce(key);
        return [key, Array.isArray(data) ? data : []];
      })
    );

    const dataMap = Object.fromEntries(entries);
    render(dataMap);
  }

  function render(dataMap) {
    mount.innerHTML = "";

    const grid = h("div", { class: "hc-spotlight-grid" });
    layout.forEach((groupConfig) => {
      grid.appendChild(buildGroup(groupConfig, dataMap));
    });

    mount.appendChild(grid);
  }

  bootstrap().catch((err) => {
    console.error("spotlight bootstrap failed", err);
    mount.innerHTML = "";
    mount.appendChild(emptyState("Unable to load spotlight data right now."));
  });
})();
